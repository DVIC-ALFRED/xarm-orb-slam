cmake_minimum_required(VERSION 3.10.2)
project(Non_trivial_test VERSION 0.1)

message("Looking Eigen 3")
find_package(Eigen3 3.1.0 REQUIRED)

# include(FindPackageHandleStandardArgs)
# find_package_handle_standard_args(Eigen3
#   REQUIRED_VARS EIGEN3_LIBRARY EIGEN3_INCLUDE_DIR
#   VERSION_VAR EIGEN3_VERSION_STRING)
if(EIGEN3_FOUND)
    message("EIGEN3_FOUND : ${EIGEN3_FOUND}")
    message("EIGEN3_VERSION : ${EIGEN3_VERSION}")
    message("EIGEN3_LIBS : ${EIGEN3_LIBS}")
    message("EIGEN3_SOURCE_DIR : ${EIGEN3_SOURCE_DIR}")
    message("EIGEN3_INCLUDE_DIR : ${EIGEN3_INCLUDE_DIR}")
    message("EIGEN3_INCLUDE_DIRS : ${EIGEN3_INCLUDE_DIRS}")
    message("EIGEN3_FIND_VERSION : ${EIGEN3_FIND_VERSION}")
    message("HAVE_EIGEN3 : ${HAVE_EIGEN3}")
    message("EIGEN3_INCLUDES : ${EIGEN3_INCLUDES}")
    message("EIGEN3_LIBRARIES : ${EIGEN3_LIBRARIES}")
    message("EIGEN3_LFLAGS : ${EIGEN3_LFLAGS}")
    message("EIGEN3_DEFINITIONS : ${EIGEN3_DEFINITIONS}")
else()
    message("Eigen 3 not found...")
endif()

message("Looking for Pangolin")
find_package(Pangolin REQUIRED)
# include(FindPackageHandleStandardArgs)
# find_package_handle_standard_args(Pangolin
#   REQUIRED_VARS Pangolin_LIBRARY Pangolin_INCLUDE_DIR
#   VERSION_VAR Pangolin_VERSION_STRING)
if(Pangolin_FOUND)
    message("Pangolin_FOUND : ${Pangolin_FOUND}")
    message("Pangolin_VERSION : ${Pangolin_VERSION}")
    message("Pangolin_LIBS : ${Pangolin_LIBS}")
    message("Pangolin_SOURCE_DIR : ${Pangolin_SOURCE_DIR}")
    message("Pangolin_INCLUDE_DIR : ${Pangolin_INCLUDE_DIR}")
    message("Pangolin_INCLUDE_DIRS : ${Pangolin_INCLUDE_DIRS}")
    message("Pangolin_FIND_VERSION : ${Pangolin_FIND_VERSION}")
    message("HAVE_Pangolin : ${HAVE_Pangolin}")
    message("Pangolin_INCLUDES : ${Pangolin_INCLUDES}")
    message("Pangolin_LIBRARIES : ${Pangolin_LIBRARIES}")
    message("Pangolin_LFLAGS : ${Pangolin_LFLAGS}")
    message("Pangolin_DEFINITIONS : ${Pangolin_DEFINITIONS}")
else()
    message("Pangolin not found...")
endif()

message("Looking for LibXml2")
find_package(LibXml2 REQUIRED)
# include(FindPackageHandleStandardArgs)
# find_package_handle_standard_args(Pangolin
#   REQUIRED_VARS Pangolin_LIBRARY Pangolin_INCLUDE_DIR
#   VERSION_VAR Pangolin_VERSION_STRING)
if(LibXml2_FOUND)
    message("LibXml2_FOUND : ${LibXml2_FOUND}")
    message("LibXml2_VERSION : ${LibXml2_VERSION}")
    message("LibXml2_LIBS : ${LibXml2_LIBS}")
    message("LibXml2_SOURCE_DIR : ${LibXml2_SOURCE_DIR}")
    message("LibXml2_INCLUDE_DIR : ${LibXml2_INCLUDE_DIR}")
    message("LibXml2_INCLUDE_DIRS : ${LibXml2_INCLUDE_DIRS}")
    message("LibXml2_FIND_VERSION : ${LibXml2_FIND_VERSION}")
    message("HAVE_LibXml2 : ${HAVE_LibXml2}")
    message("LibXml2_INCLUDES : ${LibXml2_INCLUDES}")
    message("LibXml2_LIBRARIES : ${LibXml2_LIBRARIES}")
    message("LibXml2_LFLAGS : ${LibXml2_LFLAGS}")
    message("LibXml2_DEFINITIONS : ${LibXml2_DEFINITIONS}")
else()
    message("Pangolin not found...")
endif()

message("Looking for OpenCV")
find_package(OpenCV 4.4 REQUIRED)
# include(FindPackageHandleStandardArgs)
# find_package_handle_standard_args(OpenCV
#   REQUIRED_VARS OpenCV_LIBRARY OpenCV_INCLUDE_DIR
#   VERSION_VAR OpenCV_VERSION_STRING)
if(OpenCV_FOUND)
    message("OpenCV_FOUND : ${OpenCV_FOUND}")
    message("OpenCV_VERSION : ${OpenCV_VERSION}")
    message("OpenCV_LIBS : ${OpenCV_LIBS}")
    message("OpenCV_SOURCE_DIR : ${OpenCV_SOURCE_DIR}")
    message("OpenCV_INCLUDE_DIR : ${OpenCV_INCLUDE_DIR}")
    message("OpenCV_INCLUDE_DIRS : ${OpenCV_INCLUDE_DIRS}")
    message("OpenCV_LINK_DIRECTORIES : ${OpenCV_LINK_DIRECTORIES}")
    message("OpenCV_FIND_VERSION : ${OpenCV_FIND_VERSION}")
    message("HAVE_OpenCV : ${HAVE_OpenCV}")
    message("OpenCV_INCLUDES : ${OpenCV_INCLUDES}")
    message("OpenCV_LIBRARIES : ${OpenCV_LIBRARIES}")
    message("OpenCV_LFLAGS : ${OpenCV_LFLAGS}")
    message("OpenCV_DEFINITIONS : ${OpenCV_DEFINITIONS}")
else()
    message("OpenCV not found...")
endif()